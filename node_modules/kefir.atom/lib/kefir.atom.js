"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Molecule = exports.Atom = exports.LensedAtom = exports.MutableWithSource = exports.AbstractMutable = exports.holding = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _kefir = require("kefir");

var Kefir = _interopRequireWildcard(_kefir);

var _ramda = require("ramda");

var R = _interopRequireWildcard(_ramda);

var _partial = require("partial.lenses");

var L = _interopRequireWildcard(_partial);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

//

var lock = 0;

var prevs = [];
var atoms = [];

var release = function release() {
  while (prevs.length) {
    var prev = prevs.pop();
    var atom = atoms.pop();
    var next = atom._currentEvent.value;

    if (!R.equals(prev, next)) atom._emitValue(next);
  }
};

var holding = exports.holding = function holding(ef) {
  ++lock;
  try {
    return ef();
  } finally {
    if (! --lock) release();
  }
};

//

var AbstractMutable = exports.AbstractMutable = function (_Kefir$Property) {
  _inherits(AbstractMutable, _Kefir$Property);

  function AbstractMutable() {
    _classCallCheck(this, AbstractMutable);

    return _possibleConstructorReturn(this, (AbstractMutable.__proto__ || Object.getPrototypeOf(AbstractMutable)).apply(this, arguments));
  }

  _createClass(AbstractMutable, [{
    key: "set",
    value: function set(value) {
      this.modify(function () {
        return value;
      });
    }
  }, {
    key: "remove",
    value: function remove() {
      this.set();
    }
  }, {
    key: "lens",
    value: function lens() {
      return new LensedAtom(this, L.default.apply(undefined, arguments));
    }
  }, {
    key: "view",
    value: function view() {
      return this.lens.apply(this, arguments);
    }
  }, {
    key: "_maybeEmitValue",
    value: function _maybeEmitValue(next) {
      var prev = this._currentEvent;
      if (!prev || !R.equals(prev.value, next)) this._emitValue(next);
    }
  }]);

  return AbstractMutable;
}(Kefir.Property);

//

var MutableWithSource = exports.MutableWithSource = function (_AbstractMutable) {
  _inherits(MutableWithSource, _AbstractMutable);

  function MutableWithSource(source) {
    _classCallCheck(this, MutableWithSource);

    var _this2 = _possibleConstructorReturn(this, (MutableWithSource.__proto__ || Object.getPrototypeOf(MutableWithSource)).call(this));

    _this2._source = source;
    _this2._$handleValue = null;
    return _this2;
  }

  _createClass(MutableWithSource, [{
    key: "get",
    value: function get() {
      var current = this._currentEvent;
      if (current && !lock) return current.value;else return this._getFromSource();
    }
  }, {
    key: "_handleValue",
    value: function _handleValue() {
      this._maybeEmitValue(this._getFromSource());
    }
  }, {
    key: "_onActivation",
    value: function _onActivation() {
      var _this3 = this;

      var handleValue = function handleValue(value) {
        return _this3._handleValue(value);
      };
      this._$handleValue = handleValue;
      this._source.onValue(handleValue);
    }
  }, {
    key: "_onDeactivation",
    value: function _onDeactivation() {
      this._source.offValue(this._$handleValue);
      this._$handleValue = null;
      this._currentEvent = null;
    }
  }]);

  return MutableWithSource;
}(AbstractMutable);

//

var LensedAtom = exports.LensedAtom = function (_MutableWithSource) {
  _inherits(LensedAtom, _MutableWithSource);

  function LensedAtom(source, lens) {
    _classCallCheck(this, LensedAtom);

    var _this4 = _possibleConstructorReturn(this, (LensedAtom.__proto__ || Object.getPrototypeOf(LensedAtom)).call(this, source));

    _this4._lens = lens;
    return _this4;
  }

  _createClass(LensedAtom, [{
    key: "modify",
    value: function modify(fn) {
      this._source.modify(L.modify(this._lens, fn));
    }
  }, {
    key: "_getFromSource",
    value: function _getFromSource() {
      return L.get(this._lens, this._source.get());
    }
  }]);

  return LensedAtom;
}(MutableWithSource);

//

var Atom = exports.Atom = function (_AbstractMutable2) {
  _inherits(Atom, _AbstractMutable2);

  function Atom(value) {
    _classCallCheck(this, Atom);

    var _this5 = _possibleConstructorReturn(this, (Atom.__proto__ || Object.getPrototypeOf(Atom)).call(this));

    _this5._emitValue(value);
    return _this5;
  }

  _createClass(Atom, [{
    key: "get",
    value: function get() {
      return this._currentEvent.value;
    }
  }, {
    key: "modify",
    value: function modify(fn) {
      var _this6 = this;

      var current = this._currentEvent;
      var prev = current.value;
      var next = fn(prev);
      if (lock) {
        if (!atoms.find(function (x) {
          return x === _this6;
        })) {
          prevs.push(prev);
          atoms.push(this);
        }
        current.value = next;
      } else {
        this._maybeEmitValue(next);
      }
    }
  }]);

  return Atom;
}(AbstractMutable);

//

var constructorOf = function constructorOf(x) {
  return x && x.constructor;
};

function getMutables(template) {
  var mutables = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  if (template instanceof AbstractMutable && !mutables.find(function (m) {
    return m === template;
  })) {
    mutables.push(template);
  } else {
    var _constructor = constructorOf(template);

    if (_constructor === Array) for (var i = 0, n = template.length; i < n; ++i) {
      getMutables(template[i], mutables);
    } else if (_constructor === Object) for (var k in template) {
      getMutables(template[k], mutables);
    }
  }
  return mutables;
}

function combine(template) {
  if (template instanceof AbstractMutable) {
    return template.get();
  } else {
    var _constructor2 = constructorOf(template);

    if (_constructor2 === Array) {
      var n = template.length;
      var next = Array(n);
      for (var i = 0; i < n; ++i) {
        next[i] = combine(template[i]);
      }return next;
    } else if (_constructor2 === Object) {
      var _next = {};
      for (var k in template) {
        _next[k] = combine(template[k]);
      }return _next;
    } else {
      return template;
    }
  }
}

var mismatch = function mismatch() {
  throw new Error("Molecule cannot change the template.");
};

function setMutables(template, value) {
  if (template instanceof AbstractMutable) {
    return template.set(value);
  } else {
    var _constructor3 = constructorOf(template);

    if (_constructor3 !== constructorOf(value)) mismatch();

    if (_constructor3 === Array) for (var i = 0, n = template.length; i < n; ++i) {
      setMutables(template[i], value[i]);
    } else if (_constructor3 === Object) for (var k in template) {
      setMutables(template[k], value[k]);
    } else if (!R.equals(template, value)) mismatch();
  }
}

var Molecule = exports.Molecule = function (_MutableWithSource2) {
  _inherits(Molecule, _MutableWithSource2);

  function Molecule(template) {
    _classCallCheck(this, Molecule);

    var _this7 = _possibleConstructorReturn(this, (Molecule.__proto__ || Object.getPrototypeOf(Molecule)).call(this, Kefir.combine(getMutables(template))));

    _this7._template = template;
    return _this7;
  }

  _createClass(Molecule, [{
    key: "_getFromSource",
    value: function _getFromSource() {
      return combine(this._template);
    }
  }, {
    key: "modify",
    value: function modify(fn) {
      var _this8 = this;

      var next = fn(this.get());
      holding(function () {
        return setMutables(_this8._template, next);
      });
    }
  }]);

  return Molecule;
}(MutableWithSource);

//

exports.default = function (value) {
  return new Atom(value);
};
//# sourceMappingURL=data:application/json;base64,
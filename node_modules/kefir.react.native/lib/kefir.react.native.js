"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fromIds = exports.fromClasses = exports.fromClass = exports.fromKefir = exports.config = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _ramda = require("ramda");

var R = _interopRequireWildcard(_ramda);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _kefir = require("kefir");

var _combine = require("./combine");

var Combine = _interopRequireWildcard(_combine);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

//

var config = exports.config = {
  onError: function onError(e) {
    throw e;
  }
};

//

var common = {
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    this.doUnsubscribe();
    this.doSubscribe(nextProps);
  },
  componentWillMount: function componentWillMount() {
    this.doUnsubscribe();
    this.doSubscribe(this.props);
  },
  shouldComponentUpdate: function shouldComponentUpdate(np, ns) {
    return ns.rendered !== this.state.rendered;
  },
  componentWillUnmount: function componentWillUnmount() {
    this.doUnsubscribe();
    this.setState(this.getInitialState());
  },
  render: function render() {
    return this.state.rendered;
  }
};

//

var FromKefirEnd = { callback: null };
var FromKefirNull = { callback: null, rendered: null };

var FromKefir = _react2.default.createClass(_extends({}, common, {
  getInitialState: function getInitialState() {
    return FromKefirNull;
  },
  doUnsubscribe: function doUnsubscribe() {
    var callback = this.state.callback;

    if (callback) this.props.observable.offAny(callback);
  },
  doSubscribe: function doSubscribe(_ref) {
    var _this = this;

    var observable = _ref.observable;

    if (observable instanceof _kefir.Observable) {
      var callback = function callback(e) {
        switch (e.type) {
          case "value":
            _this.setState({ rendered: e.value });
            break;
          case "error":
            config.onError(e.value);
            break;
          case "end":
            _this.setState(FromKefirEnd);
            break;
        }
      };
      observable.onAny(callback);
      this.setState({ callback: callback });
    } else {
      this.setState({ rendered: observable });
    }
  }
}));

var fromKefir = exports.fromKefir = function fromKefir(observable) {
  return _react2.default.createElement(FromKefir, { observable: observable });
};

//

function forEach(props, fn) {
  for (var key in props) {
    var val = props[key];
    if (val instanceof _kefir.Observable) {
      fn(val);
    } else if ("children" === key && val instanceof Array) {
      for (var i = 0, n = val.length; i < n; ++i) {
        var valI = val[i];
        if (valI instanceof _kefir.Observable) fn(valI);
      }
    }
  }
}

function render(Class, props, values) {
  var newProps = {};
  var newChildren = void 0;

  var k = -1;

  for (var key in props) {
    var val = props[key];
    if (val instanceof _kefir.Observable) {
      var valO = values[++k];
      if ("children" === key) newChildren = valO;else if ("mount" === key) newProps.ref = valO;else newProps[key] = valO;
    } else if ("children" === key) {
      if (val instanceof Array) {
        for (var i = 0, n = val.length; i < n; ++i) {
          var valI = val[i];
          if (valI instanceof _kefir.Observable) {
            if (!newChildren) {
              newChildren = Array(val.length);
              for (var j = 0; j < i; ++j) {
                newChildren[j] = val[j];
              }
            }
            newChildren[i] = values[++k];
          } else if (newChildren) {
            newChildren[i] = val[i];
          }
        }
      }
      if (!newChildren) newChildren = val;
    } else if ("mount" === key) {
      newProps.ref = val;
    } else {
      newProps[key] = val;
    }
  }

  return _react2.default.createElement(Class, newProps, newChildren || null);
}

//

function FakeComponent(state, props) {
  this.props = props;
  this.state = state;
}

FakeComponent.prototype.setState = function (newState) {
  if ("renderer" in newState) this.state.renderer = newState.renderer;
  if ("rendered" in newState) this.state.rendered = newState.rendered;
};

//

function Renderer1(component, newProps) {
  var _this2 = this;

  var state = { renderer: this, rendered: component.rendered };
  this.component = new FakeComponent(state, newProps);
  this.handler = function (e) {
    return _this2.doHandle(e);
  };
  forEach(newProps.props, function (observable) {
    return observable.onAny(_this2.handler);
  });
  this.component = component;
  component.setState(state);
}

Renderer1.prototype.unsubscribe = function () {
  var handler = this.handler;
  if (handler) forEach(this.component.props.props, function (observable) {
    return observable.offAny(handler);
  });
};

Renderer1.prototype.doHandle = function (e) {
  switch (e.type) {
    case "value":
      {
        var component = this.component;
        var _component$props = component.props;
        var Class = _component$props.Class;
        var props = _component$props.props;

        var rendered = render(Class, props, [e.value]);
        if (!R.equals(component.state.rendered, rendered)) component.setState({ rendered: rendered });
        return;
      }
    case "error":
      config.onError(e.value);
      return;
    default:
      this.handler = null;
      this.component.setState(FromClassEnd);
      return;
  }
};

//

function RendererN(component, newProps, n) {
  var _this3 = this;

  var state = { renderer: this, rendered: component.rendered };
  this.component = new FakeComponent(state, newProps);
  this.handlers = [];
  this.values = Array(n);

  for (var i = 0; i < n; ++i) {
    this.values[i] = this;
  }forEach(newProps.props, function (observable) {
    var i = _this3.handlers.length;
    var handler = function handler(e) {
      return _this3.doHandle(i, e);
    };
    _this3.handlers.push(handler);
    observable.onAny(handler);
  });

  this.component = component;
  component.setState(state);
}

RendererN.prototype.unsubscribe = function () {
  var _this4 = this;

  var i = -1;
  forEach(this.component.props.props, function (observable) {
    var handler = _this4.handlers[++i];
    if (handler) observable.offAny(handler);
  });
};

RendererN.prototype.doHandle = function (idx, e) {
  switch (e.type) {
    case "value":
      {
        this.values[idx] = e.value;

        for (var i = this.values.length - 1; 0 <= i; --i) {
          if (this.values[i] === this) return;
        }var component = this.component;
        var _component$props2 = component.props;
        var Class = _component$props2.Class;
        var props = _component$props2.props;

        var rendered = render(Class, props, this.values);
        if (!R.equals(component.state.rendered, rendered)) component.setState({ rendered: rendered });
        return;
      }
    case "error":
      config.onError(e.value);
      return;
    default:
      {
        this.handlers[idx] = null;

        var n = this.handlers.length;

        if (n !== this.values.length) return;

        for (var _i = 0; _i < n; ++_i) {
          if (this.handlers[_i]) return;
        }this.component.setState(FromClassEnd);
        return;
      }
  }
};

//

var FromClassEnd = { renderer: null };
var FromClassNull = { renderer: null, rendered: null };

var FromClass = _react2.default.createClass(_extends({}, common, {
  getInitialState: function getInitialState() {
    return FromClassNull;
  },
  doUnsubscribe: function doUnsubscribe() {
    var renderer = this.state.renderer;

    if (renderer) renderer.unsubscribe();
  },
  doSubscribe: function doSubscribe(newProps) {
    var props = newProps.props;


    var n = 0;
    forEach(props, function () {
      return n += 1;
    });

    switch (n) {
      case 0:
        this.setState({ renderer: null,
          rendered: render(newProps.Class, props, null) });
        break;
      case 1:
        new Renderer1(this, newProps);
        break;
      default:
        new RendererN(this, newProps, n);
        break;
    }
  }
}));

var fromClass = exports.fromClass = function fromClass(Class) {
  return function (props) {
    return _react2.default.createElement(FromClass, { Class: Class, props: props });
  };
};

var fromClasses = exports.fromClasses = function fromClasses(classes) {
  var result = {};
  for (var k in classes) {
    result[k] = fromClass(classes[k]);
  }return result;
};

//

var K = Combine.asProperty;

//

var fromIds = exports.fromIds = function fromIds(ids, fromId) {
  return ids.scan(function (_ref2, ids) {
    var _ref3 = _slicedToArray(_ref2, 1);

    var oldIds = _ref3[0];

    var newIds = {};
    var newVs = Array(ids.length);
    for (var i = 0, n = ids.length; i < n; ++i) {
      var id = ids[i];
      var k = id.toString();
      if (k in newIds) newVs[i] = newIds[k];else newIds[k] = newVs[i] = k in oldIds ? oldIds[k] : fromId(id);
    }
    return [newIds, newVs];
  }, [{}, []]).map(function (s) {
    return s[1];
  });
};

//

exports.default = K;
//# sourceMappingURL=data:application/json;base64,
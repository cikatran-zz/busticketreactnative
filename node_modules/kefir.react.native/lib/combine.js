"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.asProperty = undefined;

var _kefir = require("kefir");

var Kefir = _interopRequireWildcard(_kefir);

var _ramda = require("ramda");

var R = _interopRequireWildcard(_ramda);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function forEach(template, fn) {
  if (template instanceof Kefir.Observable) {
    fn(template);
  } else {
    var _constructor = template && template.constructor;

    if (_constructor === Array) for (var i = 0, n = template.length; i < n; ++i) {
      forEach(template[i], fn);
    } else if (_constructor === Object) for (var k in template) {
      forEach(template[k], fn);
    }
  }
}

function count(template) {
  var count = 0;
  forEach(template, function () {
    return count += 1;
  });
  return count;
}

function subscribe(template, handlers, self) {
  var index = -1;
  forEach(template, function (observable) {
    var i = ++index;
    var handler = function handler(e) {
      return self._handleAny(i, e);
    };
    handlers[i] = handler;
    observable.onAny(handler);
  });
}

function unsubscribe(template, handlers) {
  var index = -1;
  forEach(template, function (observable) {
    var handler = handlers[++index];
    if (handler) observable.offAny(handler);
  });
}

function combine(template, values, state) {
  if (template instanceof Kefir.Observable) {
    return values[++state.index];
  } else {
    var _constructor2 = template && template.constructor;

    if (_constructor2 === Array) {
      var n = template.length;
      var next = Array(n);
      for (var i = 0; i < n; ++i) {
        next[i] = combine(template[i], values, state);
      }return next;
    } else if (_constructor2 === Object) {
      var _next = {};
      for (var k in template) {
        _next[k] = combine(template[k], values, state);
      }return _next;
    } else {
      return template;
    }
  }
}

function invoke(xs) {
  if (!(xs instanceof Array)) return xs;

  var nm1 = xs.length - 1;
  var f = xs[nm1];
  return f instanceof Function ? f.apply(undefined, _toConsumableArray(xs.slice(0, nm1))) : xs;
}

//

function Combine() {
  Kefir.Property.call(this);
}

Combine.prototype = Object.create(Kefir.Property.prototype);

Combine.prototype._maybeEmitValue = function (next) {
  var prev = this._currentEvent;
  if (!prev || !R.equals(prev.value, next)) this._emitValue(next);
};

//

function CombineMany(template, n) {
  Combine.call(this);
  this._template = template;
  this._handlers = n;
  this._values = null;
}

CombineMany.prototype = Object.create(Combine.prototype);

CombineMany.prototype._onActivation = function () {
  var template = this._template;
  var n = this._handlers;
  var handlers = Array(n);
  var values = Array(n);
  for (var i = 0; i < n; ++i) {
    values[i] = this;
    handlers[i] = this;
  }
  this._handlers = handlers;
  this._values = values;
  subscribe(template, handlers, this);
};

CombineMany.prototype._handleAny = function (i, e) {
  switch (e.type) {
    case "value":
      {
        var values = this._values;
        values[i] = e.value;
        for (var j = 0, n = values.length; j < n; ++j) {
          if (values[j] === this) return;
        }this._maybeEmitValue(invoke(combine(this._template, values, { index: -1 })));
        break;
      }
    case "error":
      {
        this._emitError(e.value);
        break;
      }
    default:
      {
        var handlers = this._handlers;
        handlers[i] = null;
        for (var _j = 0, _n = handlers.length; _j < _n; ++_j) {
          if (handlers[_j]) return;
        }this._handlers = handlers.length;
        this._values = null;
        this._emitEnd();
        break;
      }
  }
};

CombineMany.prototype._onDeactivation = function () {
  var handlers = this._handlers;
  this._handlers = handlers.length;
  this._values = null;
  unsubscribe(this._template, handlers);
};

//

function CombineOne(template) {
  Combine.call(this);
  this._template = template;
  this._handler = null;
}

CombineOne.prototype = Object.create(Combine.prototype);

CombineOne.prototype._onActivation = function () {
  var _this = this;

  var handler = function handler(e) {
    return _this._handleAny(e);
  };
  this._handler = handler;
  forEach(this._template, function (observable) {
    return observable.onAny(handler);
  });
};

CombineOne.prototype._handleAny = function (e) {
  switch (e.type) {
    case "value":
      this._maybeEmitValue(invoke(combine(this._template, [e.value], { index: -1 })));
      break;
    case "error":
      this._emitError(e.value);
      break;
    default:
      this._handler = null;
      this._emitEnd();
      break;
  }
};

CombineOne.prototype._onDeactivation = function () {
  var _handler = this._handler;

  this._handler = null;
  forEach(this._template, function (observable) {
    return observable.offAny(_handler);
  });
};

//

function CombineOneWith(observable, fn) {
  Combine.call(this);
  this._observable = observable;
  this._fn = fn;
  this._handler = null;
}

CombineOneWith.prototype = Object.create(Combine.prototype);

CombineOneWith.prototype._onActivation = function () {
  var _this2 = this;

  var handler = function handler(e) {
    return _this2._handleAny(e);
  };
  this._handler = handler;
  this._observable.onAny(handler);
};

CombineOneWith.prototype._handleAny = function (e) {
  switch (e.type) {
    case "value":
      this._maybeEmitValue(this._fn(e.value));
      break;
    case "error":
      this._emitError(e.value);
      break;
    default:
      this._handler = null;
      this._emitEnd();
      break;
  }
};

CombineOneWith.prototype._onDeactivation = function () {
  var _handler = this._handler;
  var _observable = this._observable;

  this._handler = null;
  _observable.offAny(_handler);
};

//

var asProperty = exports.asProperty = function asProperty() {
  for (var _len = arguments.length, template = Array(_len), _key = 0; _key < _len; _key++) {
    template[_key] = arguments[_key];
  }

  var n = count(template);
  switch (n) {
    case 0:
      return invoke(template);
    case 1:
      return template.length === 2 && template[0] instanceof Kefir.Observable && template[1] instanceof Function ? new CombineOneWith(template[0], template[1]) : new CombineOne(template);
    default:
      return new CombineMany(template, n);
  }
};
//# sourceMappingURL=data:application/json;base64,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ZUFBekIsR0FBMkMsWUFBWTtBQUFBLE1BQzlDLFFBRDhDLEdBQ3JCLElBRHFCLENBQzlDLFFBRDhDO0FBQUEsTUFDcEMsV0FEb0MsR0FDckIsSUFEcUIsQ0FDcEMsV0FEb0M7O0FBRXJELE9BQUssUUFBTCxHQUFnQixJQUFoQjtBQUNBLGNBQVksTUFBWixDQUFtQixRQUFuQjtBQUNELENBSkQ7O0FBTUE7O0FBRU8sSUFBTSxrQ0FBYSxTQUFiLFVBQWEsR0FBaUI7QUFBQSxvQ0FBYixRQUFhO0FBQWIsWUFBYTtBQUFBOztBQUN6QyxNQUFNLElBQUksTUFBTSxRQUFOLENBQVY7QUFDQSxVQUFRLENBQVI7QUFDRSxTQUFLLENBQUw7QUFBUSxhQUFPLE9BQU8sUUFBUCxDQUFQO0FBQ1IsU0FBSyxDQUFMO0FBQVEsYUFBUSxTQUFTLE1BQVQsS0FBb0IsQ0FBcEIsSUFDQSxTQUFTLENBQVQsYUFBdUIsTUFBTSxVQUQ3QixJQUVBLFNBQVMsQ0FBVCxhQUF1QixRQUZ2QixHQUdFLElBQUksY0FBSixDQUFtQixTQUFTLENBQVQsQ0FBbkIsRUFBZ0MsU0FBUyxDQUFULENBQWhDLENBSEYsR0FJRSxJQUFJLFVBQUosQ0FBZSxRQUFmLENBSlY7QUFLUjtBQUFTLGFBQU8sSUFBSSxXQUFKLENBQWdCLFFBQWhCLEVBQTBCLENBQTFCLENBQVA7QUFQWDtBQVNELENBWE0iLCJmaWxlIjoiY29tYmluZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEtlZmlyIGZyb20gXCJrZWZpclwiXG5pbXBvcnQgKiBhcyBSICAgICBmcm9tIFwicmFtZGFcIlxuXG5mdW5jdGlvbiBmb3JFYWNoKHRlbXBsYXRlLCBmbikge1xuICBpZiAodGVtcGxhdGUgaW5zdGFuY2VvZiBLZWZpci5PYnNlcnZhYmxlKSB7XG4gICAgZm4odGVtcGxhdGUpXG4gIH0gZWxzZSB7XG4gICAgY29uc3QgY29uc3RydWN0b3IgPSB0ZW1wbGF0ZSAmJiB0ZW1wbGF0ZS5jb25zdHJ1Y3RvclxuXG4gICAgaWYgKGNvbnN0cnVjdG9yID09PSBBcnJheSlcbiAgICAgIGZvciAobGV0IGk9MCwgbj10ZW1wbGF0ZS5sZW5ndGg7IGk8bjsgKytpKVxuICAgICAgICBmb3JFYWNoKHRlbXBsYXRlW2ldLCBmbilcbiAgICBlbHNlIGlmIChjb25zdHJ1Y3RvciA9PT0gT2JqZWN0KVxuICAgICAgZm9yIChjb25zdCBrIGluIHRlbXBsYXRlKVxuICAgICAgICBmb3JFYWNoKHRlbXBsYXRlW2tdLCBmbilcbiAgfVxufVxuXG5mdW5jdGlvbiBjb3VudCh0ZW1wbGF0ZSkge1xuICBsZXQgY291bnQgPSAwXG4gIGZvckVhY2godGVtcGxhdGUsICgpID0+IGNvdW50ICs9IDEpXG4gIHJldHVybiBjb3VudFxufVxuXG5mdW5jdGlvbiBzdWJzY3JpYmUodGVtcGxhdGUsIGhhbmRsZXJzLCBzZWxmKSB7XG4gIGxldCBpbmRleCA9IC0xXG4gIGZvckVhY2godGVtcGxhdGUsIG9ic2VydmFibGUgPT4ge1xuICAgIGNvbnN0IGkgPSArK2luZGV4XG4gICAgY29uc3QgaGFuZGxlciA9IGUgPT4gc2VsZi5faGFuZGxlQW55KGksIGUpXG4gICAgaGFuZGxlcnNbaV0gPSBoYW5kbGVyXG4gICAgb2JzZXJ2YWJsZS5vbkFueShoYW5kbGVyKVxuICB9KVxufVxuXG5mdW5jdGlvbiB1bnN1YnNjcmliZSh0ZW1wbGF0ZSwgaGFuZGxlcnMpIHtcbiAgbGV0IGluZGV4ID0gLTFcbiAgZm9yRWFjaCh0ZW1wbGF0ZSwgb2JzZXJ2YWJsZSA9PiB7XG4gICAgY29uc3QgaGFuZGxlciA9IGhhbmRsZXJzWysraW5kZXhdXG4gICAgaWYgKGhhbmRsZXIpXG4gICAgICBvYnNlcnZhYmxlLm9mZkFueShoYW5kbGVyKVxuICB9KVxufVxuXG5mdW5jdGlvbiBjb21iaW5lKHRlbXBsYXRlLCB2YWx1ZXMsIHN0YXRlKSB7XG4gIGlmICh0ZW1wbGF0ZSBpbnN0YW5jZW9mIEtlZmlyLk9ic2VydmFibGUpIHtcbiAgICByZXR1cm4gdmFsdWVzWysrc3RhdGUuaW5kZXhdXG4gIH0gZWxzZSB7XG4gICAgY29uc3QgY29uc3RydWN0b3IgPSB0ZW1wbGF0ZSAmJiB0ZW1wbGF0ZS5jb25zdHJ1Y3RvclxuXG4gICAgaWYgKGNvbnN0cnVjdG9yID09PSBBcnJheSkge1xuICAgICAgY29uc3QgbiA9IHRlbXBsYXRlLmxlbmd0aFxuICAgICAgY29uc3QgbmV4dCA9IEFycmF5KG4pXG4gICAgICBmb3IgKGxldCBpPTA7IGk8bjsgKytpKVxuICAgICAgICBuZXh0W2ldID0gY29tYmluZSh0ZW1wbGF0ZVtpXSwgdmFsdWVzLCBzdGF0ZSlcbiAgICAgIHJldHVybiBuZXh0XG4gICAgfSBlbHNlIGlmIChjb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB7XG4gICAgICBjb25zdCBuZXh0ID0ge31cbiAgICAgIGZvciAoY29uc3QgayBpbiB0ZW1wbGF0ZSlcbiAgICAgICAgbmV4dFtrXSA9IGNvbWJpbmUodGVtcGxhdGVba10sIHZhbHVlcywgc3RhdGUpXG4gICAgICByZXR1cm4gbmV4dFxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGVtcGxhdGVcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlKHhzKSB7XG4gIGlmICghKHhzIGluc3RhbmNlb2YgQXJyYXkpKVxuICAgIHJldHVybiB4c1xuXG4gIGNvbnN0IG5tMSA9IHhzLmxlbmd0aC0xXG4gIGNvbnN0IGYgPSB4c1tubTFdXG4gIHJldHVybiBmIGluc3RhbmNlb2YgRnVuY3Rpb25cbiAgICA/IGYoLi4ueHMuc2xpY2UoMCwgbm0xKSlcbiAgICA6IHhzXG59XG5cbi8vXG5cbmZ1bmN0aW9uIENvbWJpbmUoKSB7XG4gIEtlZmlyLlByb3BlcnR5LmNhbGwodGhpcylcbn1cblxuQ29tYmluZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEtlZmlyLlByb3BlcnR5LnByb3RvdHlwZSlcblxuQ29tYmluZS5wcm90b3R5cGUuX21heWJlRW1pdFZhbHVlID0gZnVuY3Rpb24gKG5leHQpIHtcbiAgY29uc3QgcHJldiA9IHRoaXMuX2N1cnJlbnRFdmVudFxuICBpZiAoIXByZXYgfHwgIVIuZXF1YWxzKHByZXYudmFsdWUsIG5leHQpKVxuICAgIHRoaXMuX2VtaXRWYWx1ZShuZXh0KVxufVxuXG4vL1xuXG5mdW5jdGlvbiBDb21iaW5lTWFueSh0ZW1wbGF0ZSwgbikge1xuICBDb21iaW5lLmNhbGwodGhpcylcbiAgdGhpcy5fdGVtcGxhdGUgPSB0ZW1wbGF0ZVxuICB0aGlzLl9oYW5kbGVycyA9IG5cbiAgdGhpcy5fdmFsdWVzID0gbnVsbFxufVxuXG5Db21iaW5lTWFueS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKENvbWJpbmUucHJvdG90eXBlKVxuXG5Db21iaW5lTWFueS5wcm90b3R5cGUuX29uQWN0aXZhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgdGVtcGxhdGUgPSB0aGlzLl90ZW1wbGF0ZVxuICBjb25zdCBuID0gdGhpcy5faGFuZGxlcnNcbiAgY29uc3QgaGFuZGxlcnMgPSBBcnJheShuKVxuICBjb25zdCB2YWx1ZXMgPSBBcnJheShuKVxuICBmb3IgKGxldCBpPTA7IGk8bjsgKytpKSB7XG4gICAgdmFsdWVzW2ldID0gdGhpc1xuICAgIGhhbmRsZXJzW2ldID0gdGhpc1xuICB9XG4gIHRoaXMuX2hhbmRsZXJzID0gaGFuZGxlcnNcbiAgdGhpcy5fdmFsdWVzID0gdmFsdWVzXG4gIHN1YnNjcmliZSh0ZW1wbGF0ZSwgaGFuZGxlcnMsIHRoaXMpXG59XG5cbkNvbWJpbmVNYW55LnByb3RvdHlwZS5faGFuZGxlQW55ID0gZnVuY3Rpb24gKGksIGUpIHtcbiAgc3dpdGNoIChlLnR5cGUpIHtcbiAgICBjYXNlIFwidmFsdWVcIjoge1xuICAgICAgY29uc3QgdmFsdWVzID0gdGhpcy5fdmFsdWVzXG4gICAgICB2YWx1ZXNbaV0gPSBlLnZhbHVlXG4gICAgICBmb3IgKGxldCBqPTAsIG49dmFsdWVzLmxlbmd0aDsgajxuOyArK2opXG4gICAgICAgIGlmICh2YWx1ZXNbal0gPT09IHRoaXMpXG4gICAgICAgICAgcmV0dXJuXG4gICAgICB0aGlzLl9tYXliZUVtaXRWYWx1ZShpbnZva2UoY29tYmluZSh0aGlzLl90ZW1wbGF0ZSwgdmFsdWVzLCB7aW5kZXg6IC0xfSkpKVxuICAgICAgYnJlYWtcbiAgICB9XG4gICAgY2FzZSBcImVycm9yXCI6IHtcbiAgICAgIHRoaXMuX2VtaXRFcnJvcihlLnZhbHVlKVxuICAgICAgYnJlYWtcbiAgICB9XG4gICAgZGVmYXVsdDoge1xuICAgICAgY29uc3QgaGFuZGxlcnMgPSB0aGlzLl9oYW5kbGVyc1xuICAgICAgaGFuZGxlcnNbaV0gPSBudWxsXG4gICAgICBmb3IgKGxldCBqPTAsIG49aGFuZGxlcnMubGVuZ3RoOyBqPG47ICsrailcbiAgICAgICAgaWYgKGhhbmRsZXJzW2pdKVxuICAgICAgICAgIHJldHVyblxuICAgICAgdGhpcy5faGFuZGxlcnMgPSBoYW5kbGVycy5sZW5ndGhcbiAgICAgIHRoaXMuX3ZhbHVlcyA9IG51bGxcbiAgICAgIHRoaXMuX2VtaXRFbmQoKVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbn1cblxuQ29tYmluZU1hbnkucHJvdG90eXBlLl9vbkRlYWN0aXZhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgaGFuZGxlcnMgPSB0aGlzLl9oYW5kbGVyc1xuICB0aGlzLl9oYW5kbGVycyA9IGhhbmRsZXJzLmxlbmd0aFxuICB0aGlzLl92YWx1ZXMgPSBudWxsXG4gIHVuc3Vic2NyaWJlKHRoaXMuX3RlbXBsYXRlLCBoYW5kbGVycylcbn1cblxuLy9cblxuZnVuY3Rpb24gQ29tYmluZU9uZSh0ZW1wbGF0ZSkge1xuICBDb21iaW5lLmNhbGwodGhpcylcbiAgdGhpcy5fdGVtcGxhdGUgPSB0ZW1wbGF0ZVxuICB0aGlzLl9oYW5kbGVyID0gbnVsbFxufVxuXG5Db21iaW5lT25lLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQ29tYmluZS5wcm90b3R5cGUpXG5cbkNvbWJpbmVPbmUucHJvdG90eXBlLl9vbkFjdGl2YXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IGhhbmRsZXIgPSBlID0+IHRoaXMuX2hhbmRsZUFueShlKVxuICB0aGlzLl9oYW5kbGVyID0gaGFuZGxlclxuICBmb3JFYWNoKHRoaXMuX3RlbXBsYXRlLCBvYnNlcnZhYmxlID0+IG9ic2VydmFibGUub25BbnkoaGFuZGxlcikpXG59XG5cbkNvbWJpbmVPbmUucHJvdG90eXBlLl9oYW5kbGVBbnkgPSBmdW5jdGlvbiAoZSkge1xuICBzd2l0Y2ggKGUudHlwZSkge1xuICAgIGNhc2UgXCJ2YWx1ZVwiOlxuICAgICAgdGhpcy5fbWF5YmVFbWl0VmFsdWUoaW52b2tlKGNvbWJpbmUodGhpcy5fdGVtcGxhdGUsIFtlLnZhbHVlXSwge2luZGV4OiAtMX0pKSlcbiAgICAgIGJyZWFrXG4gICAgY2FzZSBcImVycm9yXCI6XG4gICAgICB0aGlzLl9lbWl0RXJyb3IoZS52YWx1ZSlcbiAgICAgIGJyZWFrXG4gICAgZGVmYXVsdDpcbiAgICAgIHRoaXMuX2hhbmRsZXIgPSBudWxsXG4gICAgICB0aGlzLl9lbWl0RW5kKClcbiAgICAgIGJyZWFrXG4gIH1cbn1cblxuQ29tYmluZU9uZS5wcm90b3R5cGUuX29uRGVhY3RpdmF0aW9uID0gZnVuY3Rpb24gKCkge1xuICBjb25zdCB7X2hhbmRsZXJ9ID0gdGhpc1xuICB0aGlzLl9oYW5kbGVyID0gbnVsbFxuICBmb3JFYWNoKHRoaXMuX3RlbXBsYXRlLCBvYnNlcnZhYmxlID0+IG9ic2VydmFibGUub2ZmQW55KF9oYW5kbGVyKSlcbn1cblxuLy9cblxuZnVuY3Rpb24gQ29tYmluZU9uZVdpdGgob2JzZXJ2YWJsZSwgZm4pIHtcbiAgQ29tYmluZS5jYWxsKHRoaXMpXG4gIHRoaXMuX29ic2VydmFibGUgPSBvYnNlcnZhYmxlXG4gIHRoaXMuX2ZuID0gZm5cbiAgdGhpcy5faGFuZGxlciA9IG51bGxcbn1cblxuQ29tYmluZU9uZVdpdGgucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShDb21iaW5lLnByb3RvdHlwZSlcblxuQ29tYmluZU9uZVdpdGgucHJvdG90eXBlLl9vbkFjdGl2YXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IGhhbmRsZXIgPSBlID0+IHRoaXMuX2hhbmRsZUFueShlKVxuICB0aGlzLl9oYW5kbGVyID0gaGFuZGxlclxuICB0aGlzLl9vYnNlcnZhYmxlLm9uQW55KGhhbmRsZXIpXG59XG5cbkNvbWJpbmVPbmVXaXRoLnByb3RvdHlwZS5faGFuZGxlQW55ID0gZnVuY3Rpb24gKGUpIHtcbiAgc3dpdGNoIChlLnR5cGUpIHtcbiAgICBjYXNlIFwidmFsdWVcIjpcbiAgICAgIHRoaXMuX21heWJlRW1pdFZhbHVlKHRoaXMuX2ZuKGUudmFsdWUpKVxuICAgICAgYnJlYWtcbiAgICBjYXNlIFwiZXJyb3JcIjpcbiAgICAgIHRoaXMuX2VtaXRFcnJvcihlLnZhbHVlKVxuICAgICAgYnJlYWtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhpcy5faGFuZGxlciA9IG51bGxcbiAgICAgIHRoaXMuX2VtaXRFbmQoKVxuICAgICAgYnJlYWtcbiAgfVxufVxuXG5Db21iaW5lT25lV2l0aC5wcm90b3R5cGUuX29uRGVhY3RpdmF0aW9uID0gZnVuY3Rpb24gKCkge1xuICBjb25zdCB7X2hhbmRsZXIsIF9vYnNlcnZhYmxlfSA9IHRoaXNcbiAgdGhpcy5faGFuZGxlciA9IG51bGxcbiAgX29ic2VydmFibGUub2ZmQW55KF9oYW5kbGVyKVxufVxuXG4vL1xuXG5leHBvcnQgY29uc3QgYXNQcm9wZXJ0eSA9ICguLi50ZW1wbGF0ZSkgPT4ge1xuICBjb25zdCBuID0gY291bnQodGVtcGxhdGUpXG4gIHN3aXRjaCAobikge1xuICAgIGNhc2UgMDogcmV0dXJuIGludm9rZSh0ZW1wbGF0ZSlcbiAgICBjYXNlIDE6IHJldHVybiAodGVtcGxhdGUubGVuZ3RoID09PSAyICYmXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlWzBdIGluc3RhbmNlb2YgS2VmaXIuT2JzZXJ2YWJsZSAmJlxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVsxXSBpbnN0YW5jZW9mIEZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgICAgID8gbmV3IENvbWJpbmVPbmVXaXRoKHRlbXBsYXRlWzBdLCB0ZW1wbGF0ZVsxXSlcbiAgICAgICAgICAgICAgICAgICAgOiBuZXcgQ29tYmluZU9uZSh0ZW1wbGF0ZSkpXG4gICAgZGVmYXVsdDogcmV0dXJuIG5ldyBDb21iaW5lTWFueSh0ZW1wbGF0ZSwgbilcbiAgfVxufVxuIl19
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fromArrayBy = exports.toRamda = exports.fromRamda = exports.optional = exports.sequence = exports.log = exports.props = exports.identity = exports.pick = exports.augment = exports.filter = exports.append = exports.index = exports.findWith = exports.find = exports.prop = exports.normalize = exports.valueOr = exports.define = exports.required = exports.defaults = exports.replace = exports.choice = exports.orElse = exports.nothing = exports.choose = exports.just = exports.chain = exports.collect = exports.get = exports.set = exports.modify = exports.lens = exports.remove = exports.removeAll = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.compose = compose;

var _ramda = require("ramda");

var R = _interopRequireWildcard(_ramda);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

//

function Identity(value) {
  this.value = value;
}
var Ident = function Ident(x) {
  return new Identity(x);
};
Identity.prototype.map = function (x2y) {
  return new Identity(x2y(this.value));
};
Identity.prototype.of = Ident;
Identity.prototype.ap = function (x) {
  return new Identity(this.value(x.value));
};

//

function Constant(value) {
  this.value = value;
}
var Const = function Const(x) {
  return new Constant(x);
};
var Single = function Single(x) {
  return Const([x]);
};
Constant.prototype.map = function () {
  return this;
};
Constant.prototype.of = Const;
Constant.prototype.ap = function (x) {
  return new Const(R.concat(this.value, x.value));
};

//

var warn = process.env.NODE_ENV === "production" ? function () {} : function () {
  var warned = {};

  return function (message) {
    if (!(message in warned)) {
      warned[message] = message;
      console.warn("partial.lenses:", message);
    }
  };
}();

//

var curry2 = function curry2(fn) {
  return function (a, b) {
    switch (arguments.length) {
      case 1:
        return function (b) {
          return fn(a, b);
        };
      default:
        return fn(a, b);
    }
  };
};

var curry3 = function curry3(fn) {
  return function (a, b, c) {
    switch (arguments.length) {
      case 1:
        return curry2(function (b, c) {
          return fn(a, b, c);
        });
      case 2:
        return function (c) {
          return fn(a, b, c);
        };
      default:
        return fn(a, b, c);
    }
  };
};

//

var isArray = function isArray(x) {
  return x && x.constructor === Array;
};
var isObject = function isObject(x) {
  return x && x.constructor === Object;
};

var unArray = function unArray(x) {
  return isArray(x) ? x : undefined;
};

var mkArray = function mkArray(x) {
  return isArray(x) ? x : [];
};

//

var id = function id(x) {
  return x;
};
var snd = function snd(_, c) {
  return c;
};

//

var check = function check(expected, predicate) {
  return function (x) {
    if (predicate(x)) return x;else throw new Error("Expected " + expected + ", but got " + x + ".");
  };
};

var assert = process.env.NODE_ENV === "production" ? function () {
  return id;
} : check;

//

var dropped = function dropped(xs) {
  for (var _ in xs) {
    return xs;
  }return undefined;
};

//

var empty = {};

var deleteKey = function deleteKey(k, o) {
  var r = Object.assign({}, o);
  delete r[k];
  return dropped(r);
};

var setKey = function setKey(k, v, o) {
  var r = Object.assign({}, o);
  r[k] = v;
  return r;
};

//

var toPartial = function toPartial(transform) {
  return function (x) {
    return undefined === x ? x : transform(x);
  };
};

//

var filtered = toPartial(function (xs) {
  return dropped(xs.filter(function (x) {
    return x !== undefined;
  }));
});

//

var seemsLens = function seemsLens(x) {
  return typeof x === "function" && x.length === 1;
};

var lifted = assert("a lens", seemsLens);

var composed = function composed(lenses) {
  switch (lenses.length) {
    case 0:
      return identity;
    case 1:
      return lift(lenses[0]);
    default:
      return function (constructor) {
        return function (x) {
          var i = lenses.length;
          var r = lift(lenses[--i])(constructor)(x);
          do {
            r = lift(lenses[--i])(constructor)(r);
          } while (0 < i);
          return r;
        };
      };
  }
};

var lift = function lift(l) {
  switch (typeof l === "undefined" ? "undefined" : _typeof(l)) {
    case "string":
      return liftProp(l);
    case "number":
      return liftIndex(l);
    case "function":
      return lifted(l);
    default:
      return composed(l);
  }
};

function compose() {
  for (var _len = arguments.length, lenses = Array(_len), _key = 0; _key < _len; _key++) {
    lenses[_key] = arguments[_key];
  }

  switch (lenses.length) {
    case 0:
      return identity;
    case 1:
      return lenses[0];
    default:
      return lenses;
  }
}

var removeAll = exports.removeAll = curry2(function (lens, data) {
  warn("`removeAll` is deprecated and will be removed in next major version --- use a different approach.");
  while (get(lens, data) !== undefined) {
    data = remove(lens, data);
  }return data;
});

var setI = function setI(l, x, s) {
  switch (typeof l === "undefined" ? "undefined" : _typeof(l)) {
    case "string":
      return setProp(l, x, s);
    case "number":
      return setIndex(l, x, s);
    case "function":
      return lifted(l)(Ident)(function () {
        return Ident(x);
      })(s).value;
    default:
      return composed(l)(Ident)(function () {
        return Ident(x);
      })(s).value;
  }
};

var getI = function getI(l, s) {
  switch (typeof l === "undefined" ? "undefined" : _typeof(l)) {
    case "string":
      return getProp(l, s);
    case "number":
      return getIndex(l, s);
    case "function":
      return lifted(l)(Const)(Const)(s).value;
    default:
      {
        var r = s;
        for (var i = 0, n = l.length; i < n; ++i) {
          r = getI(l[i], r);
        }return r;
      }
  }
};

var modifyI = function modifyI(l, x2x, s) {
  switch (typeof l === "undefined" ? "undefined" : _typeof(l)) {
    case "string":
      return setProp(l, x2x(getProp(l, s)), s);
    case "number":
      return setIndex(l, x2x(getIndex(l, s)), s);
    case "function":
      return lifted(l)(Ident)(function (y) {
        return Ident(x2x(y));
      })(s).value;
    default:
      return composed(l)(Ident)(function (y) {
        return Ident(x2x(y));
      })(s).value;
  }
};

var lensI = function lensI(getter, setter) {
  return function (_c) {
    return function (inner) {
      return function (target) {
        return inner(getter(target)).map(function (focus) {
          return setter(focus, target);
        });
      };
    };
  };
};
var collectI = function collectI(l, s) {
  return l(Const)(Single)(s).value;
};

var remove = exports.remove = curry2(function (l, s) {
  return setI(l, undefined, s);
});
var lens = exports.lens = curry2(lensI);
var modify = exports.modify = curry3(modifyI);
var set = exports.set = curry3(setI);
var get = exports.get = curry2(getI);
var collect = exports.collect = curry2(function (l, s) {
  return warn("`collect` is experimental and might be removed, renamed or changed semantically before next major release") || mkArray(filtered(collectI(lift(l), s)));
});

var chain = exports.chain = curry2(function (x2yL, xL) {
  return compose(xL, choose(function (xO) {
    return xO === undefined ? nothing : x2yL(xO);
  }));
});

var just = exports.just = function just(x) {
  return lensI(R.always(x), snd);
};

var choose = exports.choose = function choose(x2yL) {
  return function (constructor) {
    return function (inner) {
      return function (target) {
        return lift(x2yL(target))(constructor)(inner)(target);
      };
    };
  };
};

var nothing = exports.nothing = lensI(snd, snd);

var orElse = exports.orElse = curry2(function (d, l) {
  return choose(function (x) {
    return getI(l, x) !== undefined ? l : d;
  });
});

var choice = exports.choice = function choice() {
  for (var _len2 = arguments.length, ls = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    ls[_key2] = arguments[_key2];
  }

  return choose(function (x) {
    var i = ls.findIndex(function (l) {
      return getI(l, x) !== undefined;
    });
    return 0 <= i ? ls[i] : nothing;
  });
};

var replacer = function replacer(inn, out) {
  return function (x) {
    return R.equals(x, inn) ? out : x;
  };
};
var normalizer = function normalizer(fn) {
  return function (_c) {
    return function (inner) {
      return function (x) {
        return inner(fn(x)).map(fn);
      };
    };
  };
};

var replace = exports.replace = curry2(function (inn, out) {
  return function (_c) {
    return function (inner) {
      return function (x) {
        return inner(replacer(inn, out)(x)).map(replacer(out, inn));
      };
    };
  };
});

var defaults = exports.defaults = function defaults(out) {
  return function (_c) {
    return function (inner) {
      return function (x) {
        return inner(x === undefined ? out : x).map(replacer(out, undefined));
      };
    };
  };
};
var required = exports.required = function required(inn) {
  return replace(inn, undefined);
};
var define = exports.define = function define(v) {
  return normalizer(function (x) {
    return x === undefined ? v : x;
  });
};

var valueOr = exports.valueOr = function valueOr(v) {
  return function (_c) {
    return function (inner) {
      return function (x) {
        return inner(x === undefined || x === null ? v : x);
      };
    };
  };
};

var normalize = exports.normalize = function normalize(transform) {
  return normalizer(toPartial(transform));
};

var isProp = function isProp(x) {
  return typeof x === "string";
};

var prop = exports.prop = assert("a string", isProp);

var getProp = function getProp(k, o) {
  return isObject(o) ? o[k] : undefined;
};
var setProp = function setProp(k, v, o) {
  var oOut = isObject(o) ? o : empty;
  return v === undefined ? deleteKey(k, oOut) : setKey(k, v, oOut);
};
var liftProp = function liftProp(k) {
  return function (_c) {
    return function (inner) {
      return function (o) {
        return inner(getProp(k, o)).map(function (v) {
          return setProp(k, v, o);
        });
      };
    };
  };
};

var find = exports.find = function find(predicate) {
  return choose(function (xs) {
    if (isArray(xs)) {
      var i = xs.findIndex(predicate);
      return i < 0 ? append : i;
    } else {
      return append;
    }
  });
};

var findWith = exports.findWith = function findWith() {
  var lls = lift(compose.apply(undefined, arguments));
  return compose(find(function (x) {
    return getI(lls, x) !== undefined;
  }), lls);
};

var isIndex = function isIndex(x) {
  return Number.isInteger(x) && 0 <= x;
};

var index = exports.index = assert("a non-negative integer", isIndex);

var getIndex = function getIndex(i, xs) {
  return isArray(xs) ? xs[i] : undefined;
};
var setIndex = function setIndex(i, x, xs) {
  if (x === undefined) {
    if (!isArray(xs)) return undefined;
    if (xs.length <= i) return dropped(xs);
    var ys = xs.slice(0);
    ys.splice(i, 1);
    return dropped(ys);
  } else {
    if (!isArray(xs)) return Array(i).concat([x]);
    if (xs.length <= i) return xs.concat(Array(i - xs.length), [x]);
    var _ys = xs.slice(0);
    _ys[i] = x;
    return _ys;
  }
};
var liftIndex = function liftIndex(i) {
  return function (_c) {
    return function (inner) {
      return function (xs) {
        return inner(getIndex(i, xs)).map(function (x) {
          return setIndex(i, x, xs);
        });
      };
    };
  };
};

var append = exports.append = lensI(snd, function (x, xs) {
  return x === undefined ? unArray(xs) : isArray(xs) ? xs.concat([x]) : [x];
});

var filter = exports.filter = function filter(p) {
  return lensI(function (xs) {
    return unArray(xs) && xs.filter(p);
  }, function (ys, xs) {
    return dropped(mkArray(ys).concat(mkArray(xs).filter(function (x) {
      return !p(x);
    })));
  });
};

var augment = exports.augment = function augment(template) {
  return lensI(function (x) {
    if (isObject(x)) {
      var z = _extends({}, x);
      for (var k in template) {
        z[k] = template[k](z);
      }return z;
    } else {
      return undefined;
    }
  }, function (y, cIn) {
    if (isObject(y)) {
      var _ret = function () {
        var c = isObject(cIn) ? cIn : empty;
        var z = void 0;
        var set = function set(k, v) {
          if (undefined === z) z = {};
          z[k] = v;
        };
        for (var k in y) {
          if (!(k in template)) set(k, y[k]);else if (k in c) set(k, c[k]);
        }
        return {
          v: z
        };
      }();

      if ((typeof _ret === "undefined" ? "undefined" : _typeof(_ret)) === "object") return _ret.v;
    } else {
      return undefined;
    }
  });
};

var pick = exports.pick = function pick(template) {
  return lensI(function (c) {
    var r = void 0;
    for (var k in template) {
      var v = getI(template[k], c);
      if (v !== undefined) {
        if (r === undefined) r = {};
        r[k] = v;
      }
    }
    return r;
  }, function () {
    var o = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : empty;
    var cIn = arguments[1];

    var c = cIn;
    for (var k in template) {
      c = setI(template[k], o[k], c);
    }return c;
  });
};

var identity = exports.identity = function identity(_c) {
  return function (inner) {
    return inner;
  };
};

var props = exports.props = function props() {
  for (var _len3 = arguments.length, ks = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    ks[_key3] = arguments[_key3];
  }

  return pick(R.zipObj(ks, ks));
};

var show = function show() {
  for (var _len4 = arguments.length, labels = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    labels[_key4] = arguments[_key4];
  }

  return function (x) {
    var _console;

    return (_console = console).log.apply(_console, labels.concat([x])) || x;
  };
};

var log = exports.log = function log() {
  for (var _len5 = arguments.length, labels = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
    labels[_key5] = arguments[_key5];
  }

  return lensI(show.apply(undefined, labels.concat(["get"])), show.apply(undefined, labels.concat(["set"])));
};

var sequence = exports.sequence = function sequence(constructor) {
  return function (inner) {
    return function (target) {
      return warn("`sequence` is experimental and might be removed, renamed or changed semantically before next major release") || R.traverse(constructor, inner, mkArray(target)).map(filtered);
    };
  };
};

var optional = exports.optional = compose(lensI(toPartial(function (x) {
  return [x];
}), toPartial(function (_ref) {
  var _ref2 = _slicedToArray(_ref, 1);

  var x = _ref2[0];
  return x;
})), sequence);

var fromRamda = exports.fromRamda = function fromRamda(l) {
  return function (_c) {
    return l;
  };
};
var fantasy = function fantasy() {
  throw new Error("Sorry, `toRamda` is only fantasy!");
};
var toRamda = exports.toRamda = function toRamda(l) {
  return lift(l)(fantasy);
};

var fromArrayBy = exports.fromArrayBy = function fromArrayBy(id) {
  return warn("`fromArrayBy` is experimental and might be removed, renamed or changed semantically before next major release") || lensI(function (xs) {
    if (isArray(xs)) {
      var o = {};
      for (var i = 0, n = xs.length; i < n; ++i) {
        var x = xs[i];
        o[x[id]] = x;
      }
      return o;
    }
  }, function (o) {
    return isObject(o) ? R.values(o) : undefined;
  });
};

exports.default = compose;
//# sourceMappingURL=data:application/json;base64,